{"ast":null,"code":"var _jsxFileName = \"/home/lucas/repositories/react-lessons/11-class-based-components/src/components/UserFinder.js\";\nimport { Fragment, Component } from 'react';\nimport Users from './Users';\nimport classes from './UserFinder.module.css';\nimport UsersContext from '../store/users-context';\n\n// const DUMMY_USERS = [\n//   { id: 'u1', name: 'Max' },\n//   { id: 'u2', name: 'Manuel' },\n//   { id: 'u3', name: 'Julie' },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass UserFinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      filteredUsers: [],\n      searchTerm: ''\n    };\n  }\n  componentDidMount() {\n    console.log(\"This could be used to search for the users for the first time, like fetching data from db and them updating the state.\");\n    this.setState({\n      filteredUsers: this.context.users\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"This could be used the same way as useEffect with conditional variables, bellow we check if the searchTerm changed and only update if positive.\");\n    console.log(\"The if statement is used to prevent an infinite loop, because without it the componentDidUpdate will be called all the time by the this.setState.\");\n    if (prevState.searchTerm !== this.state.searchTerm) {\n      this.setState({\n        filteredUsers: this.context.users.filter(user => user.name.includes(this.state.searchTerm))\n      });\n    }\n    ;\n  }\n  searchChangeHandler(event) {\n    this.setState({\n      searchTerm: event.target.value\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.finder,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          onChange: this.searchChangeHandler.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Users, {\n        users: this.state.filteredUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n// const UserFinder = () => {\n//   const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n//   const [searchTerm, setSearchTerm] = useState('');\n\n//   useEffect(() => {\n//     setFilteredUsers(\n//       DUMMY_USERS.filter((user) => user.name.includes(searchTerm))\n//     );\n//   }, [searchTerm]);\n\n//   const searchChangeHandler = (event) => {\n//     setSearchTerm(event.target.value);\n//   };\n\n//   return (\n//     <Fragment>\n//       <div className={classes.finder}>\n//         <input type='search' onChange={searchChangeHandler} />\n//       </div>\n//       <Users users={filteredUsers} />\n//     </Fragment>\n//   );\n// };\nUserFinder.contextType = UsersContext;\nexport default UserFinder;","map":{"version":3,"names":["Fragment","Component","Users","classes","UsersContext","jsxDEV","_jsxDEV","UserFinder","constructor","state","filteredUsers","searchTerm","componentDidMount","console","log","setState","context","users","componentDidUpdate","prevProps","prevState","filter","user","name","includes","searchChangeHandler","event","target","value","render","children","className","finder","type","onChange","bind","fileName","_jsxFileName","lineNumber","columnNumber","contextType"],"sources":["/home/lucas/repositories/react-lessons/11-class-based-components/src/components/UserFinder.js"],"sourcesContent":["import { Fragment, Component } from 'react';\n\nimport Users from './Users';\nimport classes from './UserFinder.module.css';\nimport UsersContext from '../store/users-context';\n\n// const DUMMY_USERS = [\n//   { id: 'u1', name: 'Max' },\n//   { id: 'u2', name: 'Manuel' },\n//   { id: 'u3', name: 'Julie' },\n// ];\n\nclass UserFinder extends Component {\n  static contextType = UsersContext;\n\n  constructor() {\n    super();\n    this.state = {\n        filteredUsers: [],\n        searchTerm: ''\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"This could be used to search for the users for the first time, like fetching data from db and them updating the state.\")\n    this.setState({\n        filteredUsers: this.context.users\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"This could be used the same way as useEffect with conditional variables, bellow we check if the searchTerm changed and only update if positive.\")\n    console.log(\"The if statement is used to prevent an infinite loop, because without it the componentDidUpdate will be called all the time by the this.setState.\")\n    if (prevState.searchTerm !== this.state.searchTerm) {\n        this.setState({\n            filteredUsers: this.context.users.filter((user) => user.name.includes(this.state.searchTerm))\n        });\n    };\n  }\n\n  searchChangeHandler(event) {\n    this.setState({searchTerm: event.target.value});\n  };\n\n  render() {\n    return (\n        <Fragment>\n            <div className={classes.finder}>\n                <input type='search' onChange={this.searchChangeHandler.bind(this)} />\n            </div>\n            <Users users={this.state.filteredUsers} />\n        </Fragment>\n    ); \n  }\n}\n\n// const UserFinder = () => {\n//   const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n//   const [searchTerm, setSearchTerm] = useState('');\n\n//   useEffect(() => {\n//     setFilteredUsers(\n//       DUMMY_USERS.filter((user) => user.name.includes(searchTerm))\n//     );\n//   }, [searchTerm]);\n\n//   const searchChangeHandler = (event) => {\n//     setSearchTerm(event.target.value);\n//   };\n\n//   return (\n//     <Fragment>\n//       <div className={classes.finder}>\n//         <input type='search' onChange={searchChangeHandler} />\n//       </div>\n//       <Users users={filteredUsers} />\n//     </Fragment>\n//   );\n// };\n\nexport default UserFinder;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,OAAOC,YAAY,MAAM,wBAAwB;;AAEjD;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,UAAU,SAASN,SAAS,CAAC;EAGjCO,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,KAAK,GAAG;MACTC,aAAa,EAAE,EAAE;MACjBC,UAAU,EAAE;IAChB,CAAC;EACH;EAEAC,iBAAiBA,CAAA,EAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,wHAAwH,CAAC;IACrI,IAAI,CAACC,QAAQ,CAAC;MACVL,aAAa,EAAE,IAAI,CAACM,OAAO,CAACC;IAChC,CAAC,CAAC;EACJ;EAEAC,kBAAkBA,CAACC,SAAS,EAAEC,SAAS,EAAE;IACvCP,OAAO,CAACC,GAAG,CAAC,iJAAiJ,CAAC;IAC9JD,OAAO,CAACC,GAAG,CAAC,mJAAmJ,CAAC;IAChK,IAAIM,SAAS,CAACT,UAAU,KAAK,IAAI,CAACF,KAAK,CAACE,UAAU,EAAE;MAChD,IAAI,CAACI,QAAQ,CAAC;QACVL,aAAa,EAAE,IAAI,CAACM,OAAO,CAACC,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACf,KAAK,CAACE,UAAU,CAAC;MAChG,CAAC,CAAC;IACN;IAAC;EACH;EAEAc,mBAAmBA,CAACC,KAAK,EAAE;IACzB,IAAI,CAACX,QAAQ,CAAC;MAACJ,UAAU,EAAEe,KAAK,CAACC,MAAM,CAACC;IAAK,CAAC,CAAC;EACjD;EAEAC,MAAMA,CAAA,EAAG;IACP,oBACIvB,OAAA,CAACN,QAAQ;MAAA8B,QAAA,gBACLxB,OAAA;QAAKyB,SAAS,EAAE5B,OAAO,CAAC6B,MAAO;QAAAF,QAAA,eAC3BxB,OAAA;UAAO2B,IAAI,EAAC,QAAQ;UAACC,QAAQ,EAAE,IAAI,CAACT,mBAAmB,CAACU,IAAI,CAAC,IAAI;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC,eACNjC,OAAA,CAACJ,KAAK;QAACe,KAAK,EAAE,IAAI,CAACR,KAAK,CAACC;MAAc;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAEjB;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEMhC,UAAU,CACPiC,WAAW,GAAGpC,YAAY;AAmEnC,eAAeG,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}